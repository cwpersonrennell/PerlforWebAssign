<eqn sub sign{ if($_[0]<0){ return -1; } return 1; } sub IntF{ my $f = $_[0]; my $x = $_[1]; my $dx = $_[2]; return $dx*&$f(($x+$dx)/2); } sub Df{ my $f = $_[0]; my $x = $_[1]; my $PREC = $_[2]; my $h = 10**(-$PREC); return (-$_[0]($x+2*$h)+8*$_[0]($x+$h)-8*$_[0]($x-$h)+$_[0]($x-2*$h))/(12*$h); } sub D2f{ my $f = $_[0]; my $x = $_[1]; my $PREC = $_[2]; my $h = 10**-$PREC; return (-$_[0]($x+2*$h)+16*$_[0]($x+$h)-30*$_[0]($x)+16*$_[0]($x-$h)-$_[0]($x-2*$h))/(12*$h**2); } sub D3f{ my $f = $_[0]; my $x = $_[1]; my $PREC = $_[2]; my $h = 10**-$PREC; return ($_[0]($x+2*$h)-2*$_[0]($x+$h)+2*$_[0]($x-$h)-$_[0]($x-2*$h))/(2*$h**3); } sub bisection_root_finder{ my $f = $_[0]; my $a = $_[1]; my $b = $_[2]; my $PRECISION = $_[3]; my $TOLERANCE = 10**-$PRECISION; my $MAX_ITERATIONS = 50; if ($b<$a) { $b=$_[1]; $a=$_[2]; } if(abs($_[0]($a))<$TOLERANCE){ return $a; } if(abs($_[0]($b))<$TOLERANCE){ return $b; } if(($_[0]($a)<0 && $_[0]($b)<0)||(0<$_[0]($a)&&0<$_[0]($b))){ return undef; } $n = 1; while ($n<$MAX_ITERATIONS) { $c = ($a+$b)/2; if(abs($_[0]($c))<$TOLERANCE || abs($b-$a)/2<$TOLERANCE){ return round($c,$PRECISION); } $n=$n+1; if(sign($_[0]($c))==sign($_[0]($a))){ $a = $c; }else{ $b = $c; } } return undef; } sub critical_f_value{ my $f = $_[0]; my $a = $_[1]; my $dx = $_[2]; my $b = $a+$dx; sub df{ my $x = $_[0]; return Df(\&$f,$x,10); } my $result =bisection_root_finder(\&df,$a,$b,10); my $n = 1; while(!$result && $n<50){ $b=$b+$dx; $result =bisection_root_finder(\&df,$a,$b,10); $n= $n+1; } if($result){ return $result; }else{ return undef; } } sub critValues{ my $f=$_[0]; my $a=$_[1]; my $b=$_[2]; my $ar = (); my @result = @$ar; my $n = 1; my $j = 0; my $dx = 0.01; if(Df(\&$f,$a,10)!=0){ $dx = -&$f($a)/Df(\&$f,$a,10); } $result[$n] = critical_f_value(\&$f,$a,$dx); $a = $result[$n]+$dx; my $c=0; while($a<$b && $c<100){ $result[$n+1] = critical_f_value(\&$f,$a,$dx); if($result[$n+1]!=undef){ $a = $result[$n+1]+0.01; $n = $n+1; }else{ $a =$a+ $dx; } if(Df(\&$f,$a,10)!=0){ $dx = abs(-&$f($a)/Df(\&$f,$a,10)); } $c=$c + 1; } @result = grep defined, @result; return \@result } sub polynomial_eval{ my $ref = $_[0]; my @poly = @$ref; my $x = $_[1]; my $output = $poly[0]; my $degree = @poly-1; for(my $i=1; $i<=$degree; $i = $i+1){ $output = $output + $poly[$i]*$x**$i; } return $output; } sub polynomial_add{ my $a_ref = $_[0]; my $b_ref = $_[1]; my @A = @$a_ref; my @B = @$b_ref; my $m = @B<@A?@A:@B; my @result = (); for(my $i = 0;$i<$m;$i = $i+1){ $result[$i] = $A[$i]+$B[$i]; } return \@result; } sub polynomial_multiply{ my $a_ref = $_[0]; my $b_ref = $_[1]; my @A = @$a_ref; my @B = @$b_ref; my $nA = @A; my $nB = @B; my @result = (0); for(my $i = 0; $i<$nA; $i = $i+1){ my @temp = (0); for(my $j = 0; $j<$nB; $j= $j+1){ $temp[$j+$i]= $A[$i]*$B[$j]; } my $ref = polynomial_add(\@temp,\@result); @result = @$ref; } return \@result; } sub str_sign{ my $result =$_[0]<0?"-":"+"; if($_[0] == 0){ return ""; } return $result; } sub polynomial_latex{ my $ref = $_[0]; my @poly = @$ref; my $n = @poly; my $result = ""; for(my $i = $n-1; 0<=$i; $i = $i-1){ if($poly[$i] == 0){ next; } my $pow = $i; my $coef = abs($poly[$i]); my $sign = str_sign($poly[$i]); if($i == $n-1){ $sign = ""; } if($coef == 1 && 0<$i){ $coef = ""; } if( 1 < $pow){ $result = "$result $sign $coef x^{$pow}"; }elsif($pow == 1){ $result = "$result $sign $coef x"; } else{ $result = "$result $sign $coef"; } } return $result; } sub polynomial_from_zeros{ my $ref = $_[0]; my @zeros = @$ref; my $n = @zeros; my @result = (-$zeros[0],1); for(my $i = 1; $i<$n; $i = $i+1){ my @p2 = (-$zeros[$i],1); my $ref = polynomial_multiply(\@result,\@p2); @result = @$ref; } return \@result; } sub polynomial_derivative{ my @poly = @{$_[0]}; my $n = @poly; my @result = (); for(my $i=$n-1; 1<=$i; $i = $i - 1){ $result[$i-1]=$poly[$i]*$i; } return \@result; } sub polynomial_integrate{ my @poly = @{$_[0]}; my $C = $_[1]; my $n = @poly; my @result = ($C); for(my $i=1; $i<=$n; $i = $i +1){ $result[$i]=$poly[$i-1]/$i; } return \@result; } sub fminmax{ my $f = $_[0]; my $a = $_[1]; my $b = $_[2]; my $cr = critValues(\&$f,$a,$b); my @cv =@$cr; my @fvals = (); my $n = @cv; for($i = 0; $i<$n; $i=$i+1){ $fvals[$i] = $_[0]($cv[$i]); } my @result = (min(@fvals),max(@fvals)); return \@result; } 
